# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model_ import Model
from server import util


class Heating(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, logs: float = None, inital_heat: bool = None):  # noqa: E501
        """Heating - a model defined in Swagger

        :param logs: The logs of this Heating.  # noqa: E501
        :type logs: float
        :param heating_type: The heating_type of this Heating.  # noqa: E501
        :type heating_type: str
        """
        self.swagger_types = {
            'logs': float,
            'inital_heat': bool
        }

        self.attribute_map = {
            'logs': 'logs',
            'inital_heat': 'inital_heat'
        }
        self._logs = logs
        self._inital_heat = inital_heat

    @classmethod
    def from_dict(cls, dikt) -> 'Heating':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Heating of this Heating.  # noqa: E501
        :rtype: Heating
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logs(self) -> float:
        """Gets the logs of this Heating.


        :return: The logs of this Heating.
        :rtype: float
        """
        return self._logs

    @logs.setter
    def logs(self, logs: float):
        """Sets the logs of this Heating.


        :param logs: The logs of this Heating.
        :type logs: float
        """
        if logs is None:
            raise ValueError("Invalid value for `logs`, must not be `None`")  # noqa: E501

        self._logs = logs

    @property
    def inital_heat(self) -> bool:
        """Gets the heating_type of this Heating.


        :return: The heating_type of this Heating.
        :rtype: str
        """
        return self._inital_heat

    @inital_heat.setter
    def inital_heat(self, inital_heat: bool):
        """Sets the heating_type of this Heating.


        :param heating_type: The heating_type of this Heating.
        :type heating_type: str
        """
        if inital_heat is None:
            raise ValueError()

        self._inital_heat = inital_heat
